import os
import logging
import requests
from flask import Flask, request, jsonify

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üî¥üî¥üî¥ –í–ù–ò–ú–ê–ù–ò–ï! –ö–õ–Æ–ß–ò –û–¢–ö–†–´–¢–´! –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ü–†–û–î–ê–ö–®–ï–ù–ï! üî¥üî¥üî¥
TELEGRAM_TOKEN = "8090532343:AAFM3AosXFH6dY6r3ukPq4LWCOS0Gl9G_Xc"
OPENROUTER_API_KEY = "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"
WEBHOOK_SECRET = "RENDER_SECRET_123!"  # –°–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ!
# üî¥üî¥üî¥

MODEL_ID = "google/gemma-7b-it"
MAX_MESSAGE_LENGTH = 4096

def ask_openrouter(prompt: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": MODEL_ID,
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=15)
        logging.info(f"OpenRouter —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        
        error_messages = {
            401: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á OpenRouter.",
            402: "–û—à–∏–±–∫–∞: –ü–ª–∞—Ç—ë–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!",
            429: "–û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤.",
        }
        return error_messages.get(response.status_code, f"–û—à–∏–±–∫–∞ {response.status_code}")

    except requests.exceptions.Timeout:
        return "–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞."
    except Exception as e:
        logging.error(f"OpenRouter –æ—à–∏–±–∫–∞: {str(e)}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."

def send_message(chat_id: int, text: str) -> None:
    truncated_text = text[:MAX_MESSAGE_LENGTH]
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": truncated_text}
    
    try:
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

@app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram."

@app.route('/', methods=['POST'])
def webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞!")
        return jsonify({"error": "Forbidden"}), 403

    data = request.get_json()
    
    try:
        message = data['message']
        chat_id = message['chat']['id']
        
        if 'text' not in message:
            send_message(chat_id, "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!")
            return jsonify({"status": "ignored"}), 200
            
        user_message = message['text']
        reply = ask_openrouter(user_message)
        send_message(chat_id, reply)

    except KeyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}")
        return jsonify({"status": "bad request"}), 400
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        send_message(chat_id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞!")

    return jsonify({"status": "ok"}), 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
